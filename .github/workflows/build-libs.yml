name: Build Libraries

on:
  push:
    paths:
      - .github/workflows/**
      - source/**
      - patches/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build-fnalibs:
    strategy:
      matrix:
        include:
          - name: Windows x86
            os: windows-latest
            platform: windows
            target: i686-pc-windows-msvc
            shell: msys2 {0}
            msys2_system: mingw32
            msys2_env: i686

          - name: Windows x64
            os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
            shell: msys2 {0}
            msys2_system: mingw64
            msys2_env: x86_64

          - name: Linux x64
            os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            shell: bash -e {0}

          - name: macOS x64
            os: macos-latest
            platform: macos
            target: x86_64-apple-darwin
            shell: bash -e {0}
            
    name: FNAlibs (${{ matrix.name }})
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: ${{ matrix.shell }}
    env:
      build-type: Debug

    steps:
    - uses: actions/checkout@v4
      with:
        sparse-checkout: |
          source
          patches
        submodules: recursive

    # Setup
    - name: Set up MSYS2 (Windows)
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msys2_system }}
        install: >-
          mingw-w64-${{ matrix.msys2_env }}-cc
          mingw-w64-${{ matrix.msys2_env }}-cmake
          mingw-w64-${{ matrix.msys2_env }}-gcc
          mingw-w64-${{ matrix.msys2_env }}-make
          mingw-w64-${{ matrix.msys2_env }}-ninja
          mingw-w64-${{ matrix.msys2_env }}-pkg-config
          mingw-w64-${{ matrix.msys2_env }}-nasm
          mingw-w64-${{ matrix.msys2_env }}-libavif
          mingw-w64-${{ matrix.msys2_env }}-libjpeg-turbo
          mingw-w64-${{ matrix.msys2_env }}-libjxl
          mingw-w64-${{ matrix.msys2_env }}-libpng
          mingw-w64-${{ matrix.msys2_env }}-libtiff
          mingw-w64-${{ matrix.msys2_env }}-libwebp
          mingw-w64-${{ matrix.msys2_env }}-zlib
      if: ${{ matrix.platform == 'windows' }}

    - name: Install dependencies (macOS)
      run: |
        # SDL2 dependencies
        brew install ninja
        # SDL2_image dependencies (https://github.com/libsdl-org/SDL_image/blob/0b79762f0a7da2aa05f0673d367994f7eb9ad812/.github/workflows/main.yml#L65-L81)
        brew install autoconf automake jpeg-turbo libavif libpng libtiff nasm webp
        
      if: ${{ matrix.platform == 'macos' }}

    - name: Install dependencies (Linux)
      run: |
        sudo apt-get update

        # SDL2 dependencies (https://github.com/libsdl-org/SDL/blob/main/docs/README-linux.md)
        sudo apt-get install build-essential git make \
            pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev
        # SDL2_image dependencies (https://github.com/libsdl-org/SDL_image/blob/0b79762f0a7da2aa05f0673d367994f7eb9ad812/.github/workflows/main.yml#L82-L100)
        sudo apt-get install autoconf automake libavif-dev libjpeg-dev libtiff-dev libtool libwebp-dev nasm zlib1g-dev
      if: ${{ matrix.platform == 'linux' }}

    # SDL2
    - name: Configure SDL2
      working-directory: source/SDL2
      run: |
        cmake -S . -B build -G Ninja \
        -DSDL_VENDOR_INFO="Github Workflow" \
        -DSDL_CMAKE_DEBUG_POSTFIX="" \
        -DCMAKE_INSTALL_PREFIX=cmake_prefix \
        -DCMAKE_BUILD_TYPE=${{ env.build-type }}

    - name: Build SDL2
      working-directory: source/SDL2
      run: cmake --build build/ --config ${{ env.build-type }} --verbose --parallel

    - name: Install SDL2
      working-directory: source/SDL2
      run: |
        set -eu
        cmake --install build/ --config ${{ env.build-type }}
        echo "SDL2_DIR=$(pwd)/cmake_prefix" >> $GITHUB_ENV
        ( cd cmake_prefix; find ) | LC_ALL=C sort -u

    # SDL2_image
    - name: Configure SDL2_image
      working-directory: source/SDL2_image
      run: |
        export CMAKE_CONFIGURATION_TYPES=${{ env.build-type }}
        # JPEG-XL is disabled, because it's causing issues on macOS
        cmake -B build -G Ninja \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$PWD/build \
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$PWD/build \
          -DCMAKE_BUILD_TYPE=${{ env.build-type }} \
          -DSDL2IMAGE_SAMPLES=ON \
          -DSDL2IMAGE_AVIF=ON \
          -DSDL2IMAGE_JXL=OFF \
          -DSDL2IMAGE_TIF=ON \
          -DSDL2IMAGE_WEBP=ON \
          -DSDL2IMAGE_VENDORED=ON \
          -DSDL2IMAGE_DEBUG_POSTFIX="" \
          -DCMAKE_INSTALL_PREFIX=cmake_prefix

    - name: Build SDL2_image
      working-directory: source/SDL2_image
      run: cmake --build build/ --config ${{ env.build-type }} --verbose --parallel

    - name: Install SDL2_image
      working-directory: source/SDL2_image
      run: |
        set -eu
        cmake --install build/ --config ${{ env.build-type }}
        echo "SDL2_image_DIR=$(pwd)/cmake_prefix" >> $GITHUB_ENV
        ( cd cmake_prefix; find . ) | LC_ALL=C sort -u

    # FAudio
    - name: Configure FAudio (Windows)
      working-directory: source/FNA/lib/FAudio
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/bin/SDL2.dll
      if: ${{ matrix.platform == 'windows' }}
      
    - name: Configure FAudio (macOS)
      working-directory: source/FNA/lib/FAudio
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.dylib
      if: ${{ matrix.platform == 'macos' }}
      
    - name: Configure FAudio (Linux)
      working-directory: source/FNA/lib/FAudio
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.so
      if: ${{ matrix.platform == 'linux' }}

    - name: Build FAudio
      working-directory: source/FNA/lib/FAudio
      run: cmake --build ${{ env.build-type }}

    # FNA3D
    - name: Configure FNA3D (Windows)
      working-directory: source/FNA/lib/FNA3D
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/bin/SDL2.dll
      if: ${{ matrix.platform == 'windows' }}

    - name: Configure FNA3D (macOS
      working-directory: source/FNA/lib/FNA3D
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.dylib
      if: ${{ matrix.platform == 'macos' }}

    - name: Configure FNA3D (Linux)
      working-directory: source/FNA/lib/FNA3D
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.so
      if: ${{ matrix.platform == 'linux' }}

    - name: Build FNA3D
      working-directory: source/FNA/lib/FNA3D
      run: cmake --build ${{ env.build-type }}

    # Theorafile
    - name: Build Theorafile (Windows)
      working-directory: source/FNA/lib/Theorafile
      run: mingw32-make
      if: ${{ matrix.platform == 'windows' }}
      
    - name: Build Theorafile (macOS & Linux)
      working-directory: source/FNA/lib/Theorafile
      run: make
      if: ${{ matrix.platform != 'windows' }}

    # FNA (Only built on Linux, due to being platform agnostic)
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8'
      if: ${{ matrix.platform == 'linux' }}

    - name: Build FNA
      working-directory: source/FNA
      run: dotnet build -c ${{ env.build-type }} FNA.Core.csproj
      if: ${{ matrix.platform == 'linux' }}

    # Upload
    - name: Copy binaries (Windows)
      run: |
        cp ${{ env.SDL2_DIR }}/bin/SDL2.dll SDL2.dll
        cp ${{ env.SDL2_image_DIR }}/bin/SDL2_image.dll SDL2_image.dll
        cp source/FNA/lib/FAudio/${{ env.build-type }}/FAudio.dll FAudio.dll
        cp source/FNA/lib/FNA3D/${{ env.build-type }}/FNA3D.dll FNA3D.dll
        cp source/FNA/lib/Theorafile/libtheorafile.dll libtheorafile.dll
      if: ${{ matrix.platform == 'windows' }}

    - name: Copy binaries (macOS)
      run: |
        cp ${{ env.SDL2_DIR }}/lib/libSDL2-2.0.0.dylib libSDL2-2.0.0.dylib
        cp ${{ env.SDL2_image_DIR }}/lib/libSDL2_image-2.0.dylib libSDL2_image-2.0.0.dylib
        cp source/FNA/lib/FAudio/${{ env.build-type }}/libFAudio.0.dylib libFAudio.0.dylib
        cp source/FNA/lib/FNA3D/${{ env.build-type }}/libFNA3D.0.dylib libFNA3D.0.dylib
        cp source/FNA/lib/Theorafile/libtheorafile.dylib libtheorafile.dylib
      if: ${{ matrix.platform == 'macos' }}

    - name: Copy binaries (Linux)
      run: |
        cp source/FNA/bin/${{ env.build-type }}/net7.0/FNA.dll FNA.dll
        cp ${{ env.SDL2_DIR }}/lib/libSDL2-2.0.so.0 libSDL2-2.0.so.0
        cp ${{ env.SDL2_image_DIR }}/lib/libSDL2_image-2.0.so.0 libSDL2_image-2.0.so.0
        cp source/FNA/lib/FAudio/${{ env.build-type }}/libFAudio.so.0 libFAudio.so.0
        cp source/FNA/lib/FNA3D/${{ env.build-type }}/libFNA3D.so.0 libFNA3D.so.0
        cp source/FNA/lib/Theorafile/libtheorafile.so libtheorafile.so
      if: ${{ matrix.platform == 'linux' }}

    - name: Upload Artifacts (Windows)
      uses: actions/upload-artifact@v3
      with:
        name: fnalibs-windows-${{ matrix.msys2_env }}
        path: |
          SDL2.dll
          SDL2_image.dll
          FAudio.dll
          FNA3D.dll
          libtheorafile.dll
      if: ${{ matrix.platform == 'windows' }}

    - name: Upload Artifacts (macOS)
      uses: actions/upload-artifact@v3
      with:
        name: fnalibs-macos-x86_64
        path: |
          libSDL2-2.0.0.dylib
          libSDL2_image-2.0.0.dylib
          libFAudio.0.dylib
          libFNA3D.0.dylib
          libtheorafile.dylib
      if: ${{ matrix.platform == 'macos' }}

    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v3
      with:
        name: fnalibs-linux-x86_64
        path: |
          FNA.dll
          libSDL2-2.0.so.0
          libSDL2_image-2.0.so.0
          libFAudio.so.0
          libFNA3D.so.0
          libtheorafile.so
      if: ${{ matrix.platform == 'linux' }}

  build-piton:
    strategy:
      matrix:
        include:
          - name: Windows x86
            os: windows-latest
            toolchain: 1.77.0-x86_64-pc-windows-msvc # Last version to support Windows 7
            target: i686-pc-windows-msvc
            ui: gui
            lib_name: piton-gui-win_x86.exe

          - name: Windows x64
            os: windows-latest
            toolchain: 1.77.0-x86_64-pc-windows-msvc # Last version to support Windows 7
            target: x86_64-pc-windows-msvc
            ui: gui
            lib_name: piton-gui-win_x64.exe

          - name: Linux x64
            os: ubuntu-latest
            toolchain: stable-x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
            ui: none
            lib_name: piton-linux_x64
            container: quay.io/pypa/manylinux_2_28_x86_64 # See https://kobzol.github.io/rust/ci/2021/05/07/building-rust-binaries-in-ci-that-work-with-older-glibc.html

          - name: macOS x64
            os: macos-latest
            toolchain: stable-x86_64-apple-darwin
            target: x86_64-apple-darwin
            ui: gui
            lib_name: piton-gui-macos_x64


    name: Piton (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    env:
      CARGO_TERM_COLOR: always
      MACOSX_DEPLOYMENT_TARGET: 10.12

    steps:
    - uses: actions/checkout@v3
      with:
        sparse-checkout: source/Piton
        submodules: true

    - name: Setup environment variables
      run: |
        echo "RUSTUP_HOME=$HOME/.rustup" >> "$GITHUB_ENV"
        echo "CARGO_HOME=$HOME/.cargo" >> "$GITHUB_ENV"

    - name: Setup Rust toolchain
      if: ${{ !steps.cache.outputs.cache-hit }}
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile minimal --default-toolchain ${{ matrix.toolchain }} --target ${{ matrix.target }} -y

    - name: Build Piton binary
      working-directory: source/Piton/apphost
      run: ~/.cargo/bin/cargo build --verbose --release --target ${{ matrix.target }} -F ui-${{ matrix.ui }}

    - name: Move Piton binary
      working-directory: source/Piton/apphost
      run: mv target/${{ matrix.target }}/release/${{ startsWith(matrix.os, 'windows') && 'piton.exe' || 'piton' }} ${{ matrix.lib_name }}
  
    - name: Upload Piton binaries
      uses: actions/upload-artifact@v3
      with:
        name: piton-apphosts
        path: source/Piton/apphost/${{ matrix.lib_name }}

  generate-lib-ext:
    name: Generate lib-ext
    runs-on: ubuntu-latest
    needs: [build-fnalibs, build-piton]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup file structure
        run: |
          rm -rf ../lib-ext ../binaries
          mkdir ../lib-ext ../binaries
  
      - uses: actions/download-artifact@v3
        with:
          path: ../binaries
          
      - name: Download Discord Game SDK v3.2.1
        run: |
          wget https://dl-game-sdk.discordapp.net/3.2.1/discord_game_sdk.zip --output-document ../binaries/discord_game_sdk.zip
          unzip ../binaries/discord_game_sdk.zip -d ../binaries/discord_game_sdk

      - name: Display structure of downloaded files
        run: ls -R ../binaries

      - name: Setup lib-ext
        run: |
          ### Directory structure
          mkdir -p ../lib-ext/lib-vanilla
          mkdir -p ../lib-ext/lib-vanilla/osx
          mkdir -p ../lib-ext/lib-vanilla/lib
          mkdir -p ../lib-ext/lib-vanilla/lib64

          mkdir -p ../lib-ext/lib64-win-x86
          mkdir -p ../lib-ext/lib64-win-x64
          mkdir -p ../lib-ext/lib64-osx
          mkdir -p ../lib-ext/lib64-linux
         
          ### Vendored files
          cp README_lib-ext.md ../lib-ext/README.md

          # Windows x86
          cp binaries/steamworks/windows-x86/CSteamworks.dll ../lib-ext/lib64-win-x86

          # Windows x64
          cp binaries/steamworks/windows-x64/CSteamworks.dll ../lib-ext/lib64-win-x64
          cp binaries/steamworks/windows-x64/steam_api64.dll ../lib-ext/lib64-win-x64
          cp binaries/fmod/windows-x64/fmod64.dll ../lib-ext/lib64-win-x64
          cp binaries/fmod/windows-x64/fmodstudio64.dll ../lib-ext/lib64-win-x64

          # Piton
          cp source/Piton/apphost/test/piton-runtime.yaml ../lib-ext/piton-runtime.yaml

          pushd ../lib-ext
          
          ### Vanilla overrides
          cp ../binaries/fnalibs-linux-x86_64/FNA.dll lib-vanilla

          # Windows x86
          cp ../binaries/fnalibs-windows-i686/FNA3D.dll lib-vanilla
          cp ../binaries/fnalibs-windows-i686/FAudio.dll lib-vanilla
          cp ../binaries/fnalibs-windows-i686/SDL2.dll lib-vanilla
          cp ../binaries/fnalibs-windows-i686/libtheorafile.dll lib-vanilla

          # macOS x64
          cp ../binaries/fnalibs-macos-x86_64/libFNA3D.0.dylib lib-vanilla/osx
          cp ../binaries/fnalibs-macos-x86_64/libFAudio.0.dylib lib-vanilla/osx
          cp ../binaries/fnalibs-macos-x86_64/libSDL2-2.0.0.dylib lib-vanilla/osx
          cp ../binaries/fnalibs-macos-x86_64/libtheorafile.dylib lib-vanilla/osx

          # Linux x64
          cp ../binaries/fnalibs-linux-x86_64/libSDL2-2.0.so.0 lib-vanilla/lib64
          cp ../binaries/fnalibs-linux-x86_64/libSDL2_image-2.0.so.0 lib-vanilla/lib64
          cp ../binaries/fnalibs-linux-x86_64/libFAudio.so.0 lib-vanilla/lib64
          cp ../binaries/fnalibs-linux-x86_64/libFNA3D.so.0 lib-vanilla/lib64
          cp ../binaries/fnalibs-linux-x86_64/libtheorafile.so lib-vanilla/lib64

          ### Everest Libraries
          mv ../binaries/fnalibs-windows-i686/* lib64-win-x86
          mv ../binaries/fnalibs-windows-x86_64/* lib64-win-x64
          mv ../binaries/fnalibs-macos-x86_64/* lib64-osx
          mv ../binaries/fnalibs-linux-x86_64/* lib64-linux

          cp ../binaries/discord_game_sdk/lib/x86/discord_game_sdk.dll lib64-win-x86
          cp ../binaries/discord_game_sdk/lib/x86_64/discord_game_sdk.dll lib64-win-x64
          cp ../binaries/discord_game_sdk/lib/x86_64/discord_game_sdk.dylib lib64-osx/libdiscord_game_sdk.dylib
          cp ../binaries/discord_game_sdk/lib/x86_64/discord_game_sdk.so lib64-linux/libdiscord_game_sdk.so

          ### Piton
          mv ../binaries/piton-apphosts piton

          popd

      - name: Display the new structure
        run: ls -R ../lib-ext

      - name: Commit binaries to repository
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          git checkout -b binaries
          git fetch origin binaries
          git reset --hard origin/binaries
          
          rm -rf *
          cp -r ../lib-ext/* .

          git add -f .
          git commit -m "Update binaries for ${{ github.sha}}" || true
          git push origin binaries

          




    





    



