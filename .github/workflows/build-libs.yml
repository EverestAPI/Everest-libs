name: Build Libraries

on:
  push:
    paths:
      - .github/workflows/**
      - source/**
      - patches/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-fnalibs:
    strategy:
      matrix:
        include:
          - name: Windows x86
            os: windows-latest
            platform: windows
            target: i686-pc-windows-msvc
            shell: msys2 {0}
            msys2_system: mingw32
            msys2_env: i686

          - name: Windows x64
            os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
            shell: msys2 {0}
            msys2_system: mingw64
            msys2_env: x86_64

          - name: Linux x64
            os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            shell: bash -e {0}

          - name: macOS x64
            os: macos-latest
            platform: macos
            target: x86_64-apple-darwin
            shell: bash -e {0}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    env:
      build-type: Debug

    name: ${{ matrix.name }}
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        sparse-checkout: |
          source
          patches
        submodules: recursive

    # Setup
    - name: Set up MSYS2 (Windows)
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msys2_system }}
        install: >-
          mingw-w64-${{ matrix.msys2_env }}-cc
          mingw-w64-${{ matrix.msys2_env }}-cmake
          mingw-w64-${{ matrix.msys2_env }}-gcc
          mingw-w64-${{ matrix.msys2_env }}-make
          mingw-w64-${{ matrix.msys2_env }}-ninja
          mingw-w64-${{ matrix.msys2_env }}-pkg-config
          mingw-w64-${{ matrix.msys2_env }}-nasm
          mingw-w64-${{ matrix.msys2_env }}-libavif
          mingw-w64-${{ matrix.msys2_env }}-libjpeg-turbo
          mingw-w64-${{ matrix.msys2_env }}-libjxl
          mingw-w64-${{ matrix.msys2_env }}-libpng
          mingw-w64-${{ matrix.msys2_env }}-libtiff
          mingw-w64-${{ matrix.msys2_env }}-libwebp
          mingw-w64-${{ matrix.msys2_env }}-zlib
      if: ${{ matrix.platform == 'windows' }}

    - name: Install dependencies + Vulkan and MoltenVK (macOS)
      run: |
        brew install vulkan-loader molten-vk

        # SDL2 dependencies
        brew install ninja
        # SDL2_image dependencies (https://github.com/libsdl-org/SDL_image/blob/0b79762f0a7da2aa05f0673d367994f7eb9ad812/.github/workflows/main.yml#L65-L81)
        brew install autoconf automake jpeg-turbo libavif libpng libtiff nasm webp
      if: ${{ matrix.platform == 'macos' }}

    - name: Install dependencies (Linux)
      run: |
        sudo apt-get update

        # SDL2 dependencies (https://github.com/libsdl-org/SDL/blob/main/docs/README-linux.md)
        sudo apt-get install build-essential git make \
            pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
            libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
            libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev \
            libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev
        # SDL2_image dependencies (https://github.com/libsdl-org/SDL_image/blob/0b79762f0a7da2aa05f0673d367994f7eb9ad812/.github/workflows/main.yml#L82-L100)
        sudo apt-get install autoconf automake libavif-dev libjpeg-dev libtiff-dev libtool libwebp-dev nasm zlib1g-dev
      if: ${{ matrix.platform == 'linux' }}

    # SDL2
    - name: Configure SDL2
      working-directory: source/SDL2
      run: |
        cmake -S . -B build -G Ninja \
        -DSDL_VENDOR_INFO="Github Workflow" \
        -DSDL_CMAKE_DEBUG_POSTFIX="" \
        -DCMAKE_INSTALL_PREFIX=cmake_prefix \
        -DCMAKE_BUILD_TYPE=${{ env.build-type }}

    - name: Build SDL2
      working-directory: source/SDL2
      run: cmake --build build/ --config ${{ env.build-type }} --verbose --parallel

    - name: Install SDL2
      working-directory: source/SDL2
      run: |
        set -eu
        cmake --install build/ --config ${{ env.build-type }}
        echo "SDL2_DIR=$(pwd)/cmake_prefix" >> $GITHUB_ENV
        ( cd cmake_prefix; find ) | LC_ALL=C sort -u

    # SDL2_image
    - name: Configure SDL2_image
      working-directory: source/SDL2_image
      run: |
        export CMAKE_CONFIGURATION_TYPES=${{ env.build-type }}
        # JPEG-XL is disabled, because it's causing issues on macOS
        cmake -B build -G Ninja \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$PWD/build \
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$PWD/build \
          -DCMAKE_BUILD_TYPE=${{ env.build-type }} \
          -DSDL2IMAGE_SAMPLES=ON \
          -DSDL2IMAGE_AVIF=ON \
          -DSDL2IMAGE_JXL=OFF \
          -DSDL2IMAGE_TIF=ON \
          -DSDL2IMAGE_WEBP=ON \
          -DSDL2IMAGE_VENDORED=ON \
          -DSDL2IMAGE_DEBUG_POSTFIX="" \
          -DCMAKE_INSTALL_PREFIX=cmake_prefix

    - name: Build SDL2_image
      working-directory: source/SDL2_image
      run: cmake --build build/ --config ${{ env.build-type }} --verbose --parallel

    - name: Install SDL2_image
      working-directory: source/SDL2_image
      run: |
        set -eu
        cmake --install build/ --config ${{ env.build-type }}
        echo "SDL2_image_DIR=$(pwd)/cmake_prefix" >> $GITHUB_ENV
        ( cd cmake_prefix; find . ) | LC_ALL=C sort -u

    # FAudio
    - name: Configure FAudio (Windows)
      working-directory: source/FNA/lib/FAudio
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/bin/SDL2.dll
      if: ${{ matrix.platform == 'windows' }}
      
    - name: Configure FAudio (macOS)
      working-directory: source/FNA/lib/FAudio
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.dylib
      if: ${{ matrix.platform == 'macos' }}
      
    - name: Configure FAudio (Linux)
      working-directory: source/FNA/lib/FAudio
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.so
      if: ${{ matrix.platform == 'linux' }}

    - name: Build FAudio
      working-directory: source/FNA/lib/FAudio
      run: cmake --build ${{ env.build-type }}

    # FNA3D
    - name: Configure FNA3D (Windows)
      working-directory: source/FNA/lib/FNA3D
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/bin/SDL2.dll
      if: ${{ matrix.platform == 'windows' }}

    - name: Configure FNA3D (macOS
      working-directory: source/FNA/lib/FNA3D
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.dylib
      if: ${{ matrix.platform == 'macos' }}

    - name: Configure FNA3D (Linux)
      working-directory: source/FNA/lib/FNA3D
      run: cmake -B ${{ env.build-type }} -G Ninja . -DCMAKE_BUILD_TYPE=${{ env.build-type }} -DSDL2_INCLUDE_DIRS=${{ env.SDL2_DIR }}/include/SDL2 -DSDL2_LIBRARIES=${{ env.SDL2_DIR }}/lib/libSDL2-2.0.so
      if: ${{ matrix.platform == 'linux' }}

    - name: Build FNA3D
      working-directory: source/FNA/lib/FNA3D
      run: cmake --build ${{ env.build-type }}

    # Theorafile
    - name: Build Theorafile (Windows)
      working-directory: source/FNA/lib/Theorafile
      run: mingw32-make
      if: ${{ matrix.platform == 'windows' }}
      
    - name: Build Theorafile (macOS & Linux)
      working-directory: source/FNA/lib/Theorafile
      run: make
      if: ${{ matrix.platform != 'windows' }}

    # FNA (Only built on Linux, due to being platform agnostic)
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8'
      if: ${{ matrix.platform == 'linux' }}

    - name: Build FNA
      working-directory: source/FNA
      run: dotnet build -c ${{ env.build-type }} FNA.Core.csproj
      if: ${{ matrix.platform == 'linux' }}

    # Upload
    - name: Copy binaries (Windows)
      run: |
        cp ${{ env.SDL2_DIR }}/bin/SDL2.dll SDL2.dll
        cp ${{ env.SDL2_image_DIR }}/bin/SDL2_image.dll SDL2_image.dll
        cp source/FNA/lib/FAudio/${{ env.build-type }}/FAudio.dll FAudio.dll
        cp source/FNA/lib/FNA3D/${{ env.build-type }}/FNA3D.dll FNA3D.dll
        cp source/FNA/lib/Theorafile/libtheorafile.dll libtheorafile.dll
      if: ${{ matrix.platform == 'windows' }}

    - name: Copy binaries (macOS)
      run: |
        cp ${{ env.SDL2_DIR }}/lib/libSDL2-2.0.0.dylib libSDL2-2.0.0.dylib
        cp ${{ env.SDL2_image_DIR }}/lib/libSDL2_image-2.0.0.dylib libSDL2_image-2.0.0.dylib
        cp source/FNA/lib/FAudio/${{ env.build-type }}/libFAudio.0.dylib libFAudio.0.dylib
        cp source/FNA/lib/FNA3D/${{ env.build-type }}/libFNA3D.0.dylib libFNA3D.0.dylib
        cp source/FNA/lib/Theorafile/libtheorafile.dylib libtheorafile.dylib
        cp /usr/local/lib/libvulkan.1.dylib libvulkan.1.dylib 
        cp /usr/local/lib/libMoltenVK.dylib libMoltenVK.dylib
      if: ${{ matrix.platform == 'macos' }}

    - name: Copy binaries (Linux)
      run: |
        cp source/FNA/bin/${{ env.build-type }}/net7.0/FNA.dll FNA.dll
        cp ${{ env.SDL2_DIR }}/lib/libSDL2-2.0.so.0 libSDL2-2.0.so.0
        cp ${{ env.SDL2_image_DIR }}/lib/libSDL2_image-2.0.so.0 libSDL2_image-2.0.so.0
        cp source/FNA/lib/FAudio/${{ env.build-type }}/libFAudio.so.0 libFAudio.so.0
        cp source/FNA/lib/FNA3D/${{ env.build-type }}/libFNA3D.so.0 libFNA3D.so.0
        cp source/FNA/lib/Theorafile/libtheorafile.so libtheorafile.so
      if: ${{ matrix.platform == 'linux' }}

    - name: Upload Artifacts (Windows)
      uses: actions/upload-artifact@v3
      with:
        name: Everest-libs_windows-${{ matrix.msys2_env }}
        path: |
          SDL2.dll
          SDL2_image.dll
          FAudio.dll
          FNA3D.dll
          libtheorafile.dll
      if: ${{ matrix.platform == 'windows' }}

    - name: Upload Artifacts (macOS)
      uses: actions/upload-artifact@v3
      with:
        name: Everest-libs_macos-x86_64
        path: |
          libSDL2-2.0.0.dylib
          libSDL2_image-2.0.0.dylib
          libFAudio.0.dylib
          libFNA3D.0.dylib
          libtheorafile.dylib
          libvulkan.1.dylib 
          libMoltenVK.dylib
      if: ${{ matrix.platform == 'macos' }}

    - name: Upload Artifacts (Linux)
      uses: actions/upload-artifact@v3
      with:
        name: Everest-libs_linux-x86_64
        path: |
          FNA.dll
          libSDL2-2.0.so.0
          libSDL2_image-2.0.so.0
          libFAudio.so.0
          libFNA3D.so.0
          libtheorafile.so
      if: ${{ matrix.platform == 'linux' }}







    



