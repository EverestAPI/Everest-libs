From 8292f5ad1add3ae6647f7cf7fa75ff9878cff203 Mon Sep 17 00:00:00 2001
From: psyGamer <psygamer21@gmail.com>
Date: Sat, 4 Jan 2025 11:13:37 +0100
Subject: [PATCH] Add minimal headless shader parsing backend

---
 CMakeLists.txt        |   1 +
 mojoshader.h          |  68 ++++++++++++++++++
 mojoshader_headless.c | 164 ++++++++++++++++++++++++++++++++++++++++++
 mojoshader_internal.h |   4 ++
 4 files changed, 237 insertions(+)
 create mode 100644 mojoshader_headless.c

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8c17d9d..0ded468 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -175,6 +175,7 @@ ADD_LIBRARY(mojoshader
     mojoshader_metal.c
     mojoshader_d3d11.c
     mojoshader_vulkan.c
+    mojoshader_headless.c
     profiles/mojoshader_profile_arb1.c
     profiles/mojoshader_profile_bytecode.c
     profiles/mojoshader_profile_d3d.c
diff --git a/mojoshader.h b/mojoshader.h
index 13f945f..2365880 100644
--- a/mojoshader.h
+++ b/mojoshader.h
@@ -4088,6 +4088,74 @@ DECLSPEC void MOJOSHADER_d3d11DeleteShader(MOJOSHADER_d3d11Context *context,
 DECLSPEC void MOJOSHADER_d3d11DestroyContext(MOJOSHADER_d3d11Context *context);
 
 
+/* Headless interface... */
+
+typedef struct MOJOSHADER_headlessContext MOJOSHADER_headlessContext;
+typedef struct MOJOSHADER_headlessShaderData MOJOSHADER_headlessShaderData;
+
+/*
+ * Prepares a context to manage headless shaders.
+ *
+ * You do not need to call this if all you want is MOJOSHADER_parse().
+ *
+ * As MojoShader requires some memory to be allocated, you may provide a
+ *  custom allocator to this function, which will be used to allocate/free
+ *  memory. They function just like malloc() and free(). We do not use
+ *  realloc(). If you don't care, pass NULL in for the allocator functions.
+ *  If your allocator needs instance-specific data, you may supply it with the
+ *  (malloc_d) parameter. This pointer is passed as-is to your (m) and (f)
+ *  functions.
+ *
+ * Returns a new context on success, NULL on error.
+ */
+DECLSPEC MOJOSHADER_headlessContext *MOJOSHADER_headlessCreateContext(MOJOSHADER_malloc m,
+                                                                 MOJOSHADER_free f,
+                                                                 void *malloc_d);
+
+/*
+ * Deinitialize MojoShader's headless shader management.
+ *
+ * This will clean up resources previously allocated.
+ *
+ * This will not clean up shaders and programs you created! Please call
+ *  MOJOSHADER_headlessDeleteShader() and MOJOSHADER_headlessDeleteProgram() to clean
+ *  those up before calling this function!
+ *
+ * This function destroys the MOJOSHADER_headlessContext you pass it.
+ */
+DECLSPEC void MOJOSHADER_headlessDestroyContext(MOJOSHADER_headlessContext *ctx);
+
+/*
+ * Compile a buffer of Direct3D shader bytecode into an headless shader module.
+ *
+ *   (tokenbuf) is a buffer of Direct3D shader bytecode.
+ *   (bufsize) is the size, in bytes, of the bytecode buffer.
+ *   (swiz), (swizcount), (smap), and (smapcount) are passed to
+ *   MOJOSHADER_parse() unmolested.
+ *
+ * Returns NULL on error, or a shader handle on success.
+ *
+ * Compiled shaders from this function may not be shared between contexts.
+ */
+DECLSPEC MOJOSHADER_headlessShaderData *MOJOSHADER_headlessCompileShader(MOJOSHADER_headlessContext *ctx,
+                                                                            const char *mainfn,
+                                                                            const unsigned char *tokenbuf,
+                                                                            const unsigned int bufsize,
+                                                                            const MOJOSHADER_swizzle *swiz,
+                                                                            const unsigned int swizcount,
+                                                                            const MOJOSHADER_samplerMap *smap,
+                                                                            const unsigned int smapcount);
+
+/*
+ * Get the MOJOSHADER_parseData structure that was produced from the
+ *  call to MOJOSHADER_headlessCompileShader().
+ *
+ * This data is read-only, and you should NOT attempt to free it. This
+ *  pointer remains valid until the shader is deleted.
+ */
+DECLSPEC const MOJOSHADER_parseData *MOJOSHADER_headlessGetShaderParseData(MOJOSHADER_headlessShaderData *shader);
+
+
 /* Effects interface... */
 #include "mojoshader_effects.h"
 
diff --git a/mojoshader_headless.c b/mojoshader_headless.c
new file mode 100644
index 0000000..5cb26fe
--- /dev/null
+++ b/mojoshader_headless.c
@@ -0,0 +1,164 @@
+/**
+* MojoShader; generate shader programs from bytecode of compiled
+ *  Direct3D shaders.
+ *
+ * Please see the file LICENSE.txt in the source's root directory.
+ */
+
+#define __MOJOSHADER_INTERNAL__ 1
+#include "mojoshader_internal.h"
+
+struct MOJOSHADER_headlessContext
+{
+    const char* profile;
+
+    MOJOSHADER_malloc malloc_fn;
+    MOJOSHADER_free free_fn;
+    void *malloc_data;
+};
+
+struct MOJOSHADER_headlessShaderData
+{
+    const MOJOSHADER_parseData *parseData;
+    uint16_t tag;
+    uint32_t refcount;
+    uint32_t samplerSlots;
+    int32_t uniformBufferSize;
+};
+
+/* Error state... */
+
+static char error_buffer[1024] = { '\0' };
+
+static void set_error(const char *str)
+{
+    snprintf(error_buffer, sizeof (error_buffer), "%s", str);
+} // set_error
+
+static inline void out_of_memory(void)
+{
+    set_error("out of memory");
+} // out_of_memory
+
+/* Internals */
+
+/* Public API */
+
+MOJOSHADER_headlessContext *MOJOSHADER_headlessCreateContext(
+    MOJOSHADER_malloc m,
+    MOJOSHADER_free f,
+    void *malloc_d
+) {
+    MOJOSHADER_headlessContext* resultCtx;
+
+    if (m == NULL) m = MOJOSHADER_internal_malloc;
+    if (f == NULL) f = MOJOSHADER_internal_free;
+
+    resultCtx = (MOJOSHADER_headlessContext*) m(sizeof(MOJOSHADER_headlessContext), malloc_d);
+    if (resultCtx == NULL)
+    {
+        out_of_memory();
+        goto init_fail;
+    } // if
+
+    memset(resultCtx, '\0', sizeof(MOJOSHADER_headlessContext));
+
+#ifdef __APPLE__
+    resultCtx->profile = "metal";
+#else
+    resultCtx->profile = "spirv";
+#endif
+
+    resultCtx->malloc_fn = m;
+    resultCtx->free_fn = f;
+    resultCtx->malloc_data = malloc_d;
+
+    return resultCtx;
+
+    init_fail:
+        if (resultCtx != NULL)
+            f(resultCtx, malloc_d);
+    return NULL;
+} // MOJOSHADER_headlessCreateContext
+
+void MOJOSHADER_headlessDestroyContext(
+    MOJOSHADER_headlessContext *ctx
+) {
+    ctx->free_fn(ctx, ctx->malloc_data);
+} // MOJOSHADER_sdlDestroyContext
+
+static uint16_t shaderTagCounter = 1;
+
+MOJOSHADER_headlessShaderData *MOJOSHADER_headlessCompileShader(
+    MOJOSHADER_headlessContext *ctx,
+    const char *mainfn,
+    const unsigned char *tokenbuf,
+    const unsigned int bufsize,
+    const MOJOSHADER_swizzle *swiz,
+    const unsigned int swizcount,
+    const MOJOSHADER_samplerMap *smap,
+    const unsigned int smapcount
+) {
+    MOJOSHADER_headlessShaderData *shader = NULL;
+    int maxSamplerIndex = 0;
+    int i;
+
+    const MOJOSHADER_parseData *pd = MOJOSHADER_parse(
+        ctx->profile, mainfn,
+        tokenbuf, bufsize,
+        swiz, swizcount,
+        smap, smapcount,
+        ctx->malloc_fn,
+        ctx->free_fn,
+        ctx->malloc_data
+    );
+
+    if (pd->error_count > 0)
+    {
+        set_error(pd->errors[0].error);
+        goto parse_shader_fail;
+    } // if
+
+    shader = (MOJOSHADER_headlessShaderData*) ctx->malloc_fn(sizeof(MOJOSHADER_headlessShaderData), ctx->malloc_data);
+    if (shader == NULL)
+    {
+        out_of_memory();
+        goto parse_shader_fail;
+    } // if
+
+    shader->parseData = pd;
+    shader->refcount = 1;
+    shader->tag = shaderTagCounter++;
+
+    /* XNA allows empty shader slots in the middle, so we have to find the actual max binding index */
+    for (i = 0; i < pd->sampler_count; i += 1)
+    {
+        if (pd->samplers[i].index > maxSamplerIndex)
+        {
+            maxSamplerIndex = pd->samplers[i].index;
+        }
+    }
+
+    shader->samplerSlots = (uint32_t) maxSamplerIndex + 1;
+
+    shader->uniformBufferSize = 0;
+    for (i = 0; i < pd->uniform_count; i++)
+    {
+        shader->uniformBufferSize += Max(pd->uniforms[i].array_count, 1);
+    } // for
+    shader->uniformBufferSize *= 16; // Yes, even the bool registers are this size
+
+    return shader;
+
+    parse_shader_fail:
+        MOJOSHADER_freeParseData(pd);
+    if (shader != NULL)
+        ctx->free_fn(shader, ctx->malloc_data);
+    return NULL;
+} // MOJOSHADER_headlessCompileShader
+
+const MOJOSHADER_parseData *MOJOSHADER_headlessGetShaderParseData(
+    MOJOSHADER_headlessShaderData *shader
+) {
+    return (shader != NULL) ? shader->parseData : NULL;
+} // MOJOSHADER_headlessGetShaderParseData
\ No newline at end of file
diff --git a/mojoshader_internal.h b/mojoshader_internal.h
index d4dfe6d..10fd18c 100644
--- a/mojoshader_internal.h
+++ b/mojoshader_internal.h
@@ -316,6 +316,10 @@ static inline int Min(const int a, const int b)
 {
     return ((a < b) ? a : b);
 } // Min
+static inline int Max(const int a, const int b)
+{
+    return ((a > b) ? a : b);
+} // Max
 
 
 // Hashtables...
-- 
2.47.0

